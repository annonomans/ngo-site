{"version":3,"sources":["logo.svg","Header.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["Header","id","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oLAAe,I,uCCgCAA,E,4JAzBd,WAEI,OAEO,gCACI,0CAJW,cAKX,8BACI,qBAAIC,GAAG,aAAP,UACI,6BACA,wCAEA,6BACA,yCAEA,6BACA,uD,GAjBHC,aCONC,MARf,WACE,OACE,cAAC,EAAD,KCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCIRQ,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DAqCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACLC,SAASJ,GACTb,MAAK,SAAAkB,GACFA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBG,QACbR,UAAUC,cAAcQ,YAIxBC,QAAQC,IACJ,uDAIAZ,GAAUA,EAAOa,UACjBb,EAAOa,SAAST,KAMpBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACjBd,EAAOc,UAAUV,WAOxCW,OAAM,SAAAC,GACHL,QAAQK,MAAM,4CAA6CA,MCtFrEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BtC,IDIO,SAAkBiB,GACvB,GAA6C,kBAAmBC,UAAW,CAGvE,GADkB,IAAIqB,IAAIC,YAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIrC,OAGJ/B,OAAOgC,iBAAiB,QAAQ,WAC5B,IAAM3B,EAAK,UAAMwB,YAAN,sBAEP/B,IA8Dd,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACL6B,QAAS,CACL,iBAAkB,YAGzB1C,MAAK,SAAA2C,GAEF,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEjB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAMhD,MAAK,SAAAkB,GAC/BA,EAAa+B,aAAajD,MAAK,WAC3BQ,OAAOC,SAASyC,eAKxBtC,EAAgBC,EAAOC,MAG9Be,OAAM,WACHJ,QAAQC,IACJ,oEAvFAyB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAMhD,MAAK,WAC/ByB,QAAQC,IACJ,8DAKRd,EAAgBC,EAAOC,OC9BrCE,I","file":"static/js/main.5596b000.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\n// import logo from './logo.svg';\nimport './App.css';\n// import { Route, Switch, Link } from \"react-router-dom\";\n\nclass Header extends Component {\n\n\trender() {\n        const site_title = \"Ngo-site\"\n    \treturn (\t\n\n            <div>\n                <h2>Hello , {site_title}</h2>\n                <nav>\n                    <ul id=\"navigation\">\n                        <li>\n                        <h3>Home</h3>\n                        </li>\n                        <li>\n                        <h3>About</h3>\n                        </li>\n                        <li>\n                        <h3>Contact</h3>\n                        </li>\n                    </ul>\n                </nav>\n            </div>\n    \t\t\n    \t\t);\n  \t}\n}\n\nexport default Header;","import logo from './logo.svg';\nimport './App.css';\nimport Header from './Header';\n\nfunction App() {\n  return (\n    <Header />\n\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n          // Our service worker won't work if PUBLIC_URL is on a different origin\n          // from what our page is served on. This might happen if a CDN is used to\n          // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n          return;\n      }\n\n      window.addEventListener('load', () => {\n          const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n          if (isLocalhost) {\n              // This is running on localhost. Let's check if a service worker still exists or not.\n              checkValidServiceWorker(swUrl, config);\n\n              // Add some additional logging to localhost, pointing developers to the\n              // service worker/PWA documentation.\n              navigator.serviceWorker.ready.then(() => {\n                  console.log(\n                      'This web app is being served cache-first by a service '\n                  );\n              });\n          } else {\n              // Is not localhost. Just register service worker\n              registerValidSW(swUrl, config);\n          }\n      });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n          registration.onupdatefound = () => {\n              const installingWorker = registration.installing;\n              if (installingWorker == null) {\n                  return;\n              }\n              installingWorker.onstatechange = () => {\n                  if (installingWorker.state === 'installed') {\n                      if (navigator.serviceWorker.controller) {\n                          // At this point, the updated precached content has been fetched,\n                          // but the previous service worker will still serve the older\n                          // content until all client tabs are closed.\n                          console.log(\n                              'New content is available and will be used when all '\n                          );\n\n                          // Execute callback\n                          if (config && config.onUpdate) {\n                              config.onUpdate(registration);\n                          }\n                      } else {\n                          // At this point, everything has been precached.\n                          // It's the perfect time to display a\n                          // \"Content is cached for offline use.\" message.\n                          console.log('Content is cached for offline use.');\n\n                          // Execute callback\n                          if (config && config.onSuccess) {\n                              config.onSuccess(registration);\n                          }\n                      }\n                  }\n              };\n          };\n      })\n      .catch(error => {\n          console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n          headers: {\n              'Service-Worker': 'script'\n          },\n      })\n      .then(response => {\n          // Ensure service worker exists, and that we really are getting a JS file.\n          const contentType = response.headers.get('content-type');\n          if (\n              response.status === 404 ||\n              (contentType != null && contentType.indexOf('javascript') === -1)\n          ) {\n              // No service worker found. Probably a different app. Reload the page.\n              navigator.serviceWorker.ready.then(registration => {\n                  registration.unregister().then(() => {\n                      window.location.reload();\n                  });\n              });\n          } else {\n              // Service worker found. Proceed as normal.\n              registerValidSW(swUrl, config);\n          }\n      })\n      .catch(() => {\n          console.log(\n              'No internet connection found. App is running in offline mode.'\n          );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n          .then(registration => {\n              registration.unregister();\n          })\n          .catch(error => {\n              console.error(error.message);\n          });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker'; \n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.register();\n"],"sourceRoot":""}